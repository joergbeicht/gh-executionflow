name: Using Reusable Workflow
on:
  push:
    branches:
      - main
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Test code
        id: run-tests
        run: npm run test
      - name: Upload test report
        if: failure() && steps.run-tests.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test.json
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Build website
        id: build-website
        run: npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          # siehe artifact-name
          name: dist-files
          path: dist
  deploy:
    needs: build
    # Das ist die Nutzung eines externen Workflows
    # immer relativ vom root Folder denken
    uses: ./.github/workflows/reusable.yml
    with:
      # reusable.yml ist ein wiederverwendbarer Workflow
      # Oben wird mit uses gesagt dass reusable.yml hier benutzt werden soll
      # artifact-name: dist-files definiert die inputs die 端bergeben werden m端ssen
      # Der Artifact name wurd zuvor oben im build job definiert!
      # Deswegen muss hier artifact-name: dist-files an den reusable Workflow 端bergeben werden
      # Das input Propertie muss artifact-name heissen, das wurde im reusable Workflow so definiert
      # Siehe reusable.yml => artifact-name ist ein input vom Typ string und genau
      # dieser string wird hier mit dist-files 端bergeben!
      # da der Wiederverwendbare das erfordert!
      artifact-name: dist-files
      #secrets:
      #  some-secrets: ${{ secrets.some-secrets }}
  # Nimmt sich die outputs aus dem wiederverwendbaren Workflow siehe outputs
  print-deploy-result:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Print deploy output
        run: echo "${{ needs.deploy.outputs.result }}"
  report:
    needs: [lint, deploy]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        run: |
          echo "Something went wrong"
          echo "${{ github }}"
