name: Website Deployment
on:
  push:
    branches:
      - main
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          # cacht den folder node_modules
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        # prüft ob der Folder da ist, wenn nicht wird npm ci ausgeführt
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Lint code
        run: npm run lint
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          # cacht den folder node_modules
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        # prüft ob der Folder da ist, wenn nicht wird npm ci ausgeführt
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Test code
        id: run-tests
        run: npm run test
      - name: Upload test report
        # Diese Condition dann uploade den Report
        # Damit der Report weiss worum es geht muss zuvor die id festgelegt werden
        # Im Beispiel id: run-tests
        # Hinweis du findest alle Operatoren in GitHub Doku wie ==, <, > usw.
        # failure() ist eine spezielle Condition funktion
        # es gibt failure(), success(), always() und cancelled()
        # mit failure() stellen wir sicher dass GitHub mitbekommt, dass der Step failure() ist
        # mit && folgt die Bedingung
        # Der Test Report wird als Artifact gespeichert
        if: failure() && steps.run-tests.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test.json
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          # cacht den folder node_modules
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        # prüft ob der Folder da ist, wenn nicht wird npm ci ausgeführt
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build website
        id: build-website
        run: npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files
      - name: Output contents
        run: ls
      - name: Deploy
        run: echo "Deploying..."
  report:
    # soll nur auf diese Jobs reagieren
    needs: [lint, deploy]
    # 'if:' 'failure() bedeutet dass diese Job läuft wenn ein Job von oben fehl schlägt
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        run: |
          echo "Something went wrong"
          echo "${{ toJson(github) }}"
